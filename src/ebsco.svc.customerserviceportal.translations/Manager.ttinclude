<#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System"
#><#@ import namespace="System.CodeDom"
#><#@ import namespace="System.CodeDom.Compiler"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Data.Linq"
#><#@ import namespace="System.Data.Linq.Mapping"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Xml.Linq"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"
#><#+
// Manager class records the various blocks so it can split them up
public class Manager
{
    private Block _currentBlock;
	private readonly List<Block> _files;
    private readonly ITextTemplatingEngineHost _host;
    protected readonly StringBuilder Template;
    protected readonly List<string> GeneratedFileNames;
                                          
    public bool IsInBlock { get { return _currentBlock != null; } }
                                          
    protected Manager(ITextTemplatingEngineHost host, StringBuilder template)
    {
		_host = host;
		Template = template;
		GeneratedFileNames = new List<string>();
		_files = new List<Block>();
	}
                                          
    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
			var hostServiceProvider = host as IServiceProvider;
			if (hostServiceProvider != null && hostServiceProvider.GetService(typeof(EnvDTE.DTE)) != null)
				return new VSManager(host, template);
			
			return new Manager(host, template);
    }

    public DisposableBlock BeginBlock(string fileName)
    {
	    if (fileName == null)
	        throw new ArgumentNullException("fileName");
	
        if (_currentBlock != null)
	        EndBlock();

        _currentBlock = new Block { Name = fileName, Start = Template.Length };
                                                                  
        return new DisposableBlock(this);
    }

    public void EndBlock() {
        if (_currentBlock == null)
            return;
        _currentBlock.Length = Template.Length - _currentBlock.Start;
        _files.Add(_currentBlock);
        _currentBlock = null;
    }

    public virtual void Process()
    {
        EndBlock();
        string outputPath = Path.GetDirectoryName(_host.TemplateFile);
        _files.Reverse();
        foreach(Block block in _files) {
            string fileName = Path.Combine(outputPath, block.Name);
            string content = Template.ToString(block.Start, block.Length);
            GeneratedFileNames.Add(fileName);
            CreateFile(fileName, content);
            Template.Remove(block.Start, block.Length);
        }        
    }

    protected virtual void CreateFile(string fileName, string content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    protected bool IsFileContentDifferent(string fileName, string newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }
}
    internal class VSManager: Manager {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template) : base(host, template)
        {
			var hostServiceProvider = host as IServiceProvider;
			if (hostServiceProvider == null)
				throw new ArgumentNullException("Could not obtain IServiceProvider");
	   
			dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));			
	        if (dte == null)
				throw new ArgumentNullException("Could not obtain DTE from host");
                                                                                                                         
	        templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
		}
		                                                                                                                  
        public override void Process() {
            if (templateProjectItem.ProjectItems == null)
                return;
	     
            base.Process();

	        var keepFileNameSet = new HashSet<string>(GeneratedFileNames);
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";

            Dictionary<string, EnvDTE.ProjectItem> projectFiles = templateProjectItem.ProjectItems.Cast<EnvDTE.ProjectItem>()
                .ToDictionary(p => p.get_FileNames(0), p => p);

            // Remove unused items from the project
	        foreach(var pair in projectFiles)
	            if (!keepFileNameSet.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
				{
                    Template.AppendLine("Deleted: " + pair.Key);
					pair.Value.Delete();
				}
            // Add missing files to the project
            foreach (string fileName in keepFileNameSet)
            {
	            if (!projectFiles.ContainsKey(fileName))
				{
					templateProjectItem.ProjectItems.AddFromFile(fileName);
					Template.AppendLine("Added: " + fileName);
				}
                else
                {
					Template.AppendLine("Updated: " + fileName);
				}
            }
        }

        protected override void CreateFile(string fileName, string content) {
            if (IsFileContentDifferent(fileName, content)) {
	            var sc = dte.SourceControl;
	          
                if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
	                sc.CheckOutItem(fileName);
	       
				File.WriteAllText(fileName, content);
            }
        }
    }
    
    internal class Block {
        public string Name;
        public int Start, Length;
    }
                                          
    public class DisposableBlock : IDisposable
    {
	    private Manager _manager;
	 
		internal DisposableBlock(Manager manager)
	    {
    		_manager = manager;
		}

        void IDisposable.Dispose()
	    {
	        if (_manager.IsInBlock)
				_manager.EndBlock();
		}	
	}
 #>